[
  {
    "q": "What is the general perception about learning Promises in JavaScript?",
    "a": "Promises in JavaScript are generally perceived as a little daunting for beginners.",
    "img": "output/screenshots/frame_001.jpg"
  },
  {
    "q": "What does the speaker intend to discuss about promises execution in JavaScript?",
    "a": "The speaker intends to simplify and walk through how promises execution works in JavaScript.",
    "img": "output/screenshots/frame_001.jpg"
  },
  {
    "q": "What happens when we interact and work with promises in JavaScript?",
    "a": "The video doesn't provide specific information in this section of the transcript. More context would be needed for a comprehensive answer.",
    "img": "output/screenshots/frame_002.jpg"
  },
  {
    "q": "How can a promise be created in JavaScript?",
    "a": "A promise can be created in JavaScript by using the 'new promise' constructor.",
    "img": "output/screenshots/frame_002.jpg"
  },
  {
    "q": "What does a Promise constructor in JavaScript receive?",
    "a": "A Promise constructor in JavaScript receives an executor function.",
    "img": "output/screenshots/frame_002.jpg"
  },
  {
    "q": "What happens when the new promise constructor is executed in JavaScript?",
    "a": "A new promise object is created in memory.",
    "img": "output/screenshots/frame_002.jpg"
  },
  {
    "q": "What is one component the promise object in JavaScript contains?",
    "a": "The promise object contains internal slot \"promise state\".",
    "img": "output/screenshots/frame_003.jpg"
  },
  {
    "q": "What are the four aspects of a JavaScript promise mentioned in the video?",
    "a": "The four aspects are: promise result, promise fulfill reactions, promise reject reactions, and promise is handled.",
    "img": "output/screenshots/frame_003.jpg"
  },
  {
    "q": "What additional functionality do we get with a promise in JavaScript?",
    "a": "We get the functionality to either resolve or reject the promise.",
    "img": "output/screenshots/frame_003.jpg"
  },
  {
    "q": "How can a promise be resolved?",
    "a": "A promise can be resolved by calling \"resolve\", a function which is made available to us by the Promise itself.",
    "img": "output/screenshots/frame_004.jpg"
  },
  {
    "q": "What happens to a promise's state when the resolve function is called in JavaScript?",
    "a": "The promise's state is set to \"fulfilled\".",
    "img": "output/screenshots/frame_004.jpg"
  },
  {
    "q": "What gets set to the value passed to resolve in a JavaScript promise?",
    "a": "The promise result.",
    "img": "output/screenshots/frame_004.jpg"
  },
  {
    "q": "How can you reject a promise in JavaScript?",
    "a": "By calling the reject function.",
    "img": "output/screenshots/frame_004.jpg"
  },
  {
    "q": "What is the state and result of a promise when it's set to rejected in JavaScript?",
    "a": "When a Promise is set to rejected, it means that the Promise state is set to 'rejected' and the promise result is set to a value, usually an error message or reason why the Promise was rejected.",
    "img": "output/screenshots/frame_005.jpg"
  },
  {
    "q": "What makes promises in JavaScript special?",
    "a": "The two fields that have been skipped, are what make promises in JavaScript special.",
    "img": "output/screenshots/frame_006.jpg"
  },
  {
    "q": "What are the two types of promise reactions in JavaScript?",
    "a": "The two types of promise reactions in JavaScript are promise fulfill reactions and promise reject reactions.",
    "img": "output/screenshots/frame_006.jpg"
  },
  {
    "q": "What do the fields contain in JavaScript Promises?",
    "a": "The fields in JavaScript Promises contain Promise reaction records.",
    "img": "output/screenshots/frame_006.jpg"
  },
  {
    "q": "How can you create a promise reaction record in Javascript?",
    "a": "You can create a promise reaction record by attaching a then or a catch method to the promise.",
    "img": "output/screenshots/frame_006.jpg"
  },
  {
    "q": "What is the 'then' method responsible for in JavaScript promises?",
    "a": "The 'then' method is responsible for creating the promise reaction record.",
    "img": "output/screenshots/frame_007.jpg"
  },
  {
    "q": "What does the reaction record in JavaScript contain?",
    "a": "The reaction record in JavaScript contains many fields, including a handler.",
    "img": "output/screenshots/frame_007.jpg"
  },
  {
    "q": "What is passed to 'then' in JavaScript promises?",
    "a": "A callback code is passed to 'then' in JavaScript promises.",
    "img": "output/screenshots/frame_007.jpg"
  },
  {
    "q": "What happens when we resolve a Promise in JavaScript?",
    "a": "When a Promise is resolved, the 'resolve' function is called and added.",
    "img": "output/screenshots/frame_008.jpg"
  },
  {
    "q": "What happens to the promise state when a promise is set to fulfill in JavaScript?",
    "a": "The promise state is set to fulfill and the promise result is set to the value.",
    "img": "output/screenshots/frame_008.jpg"
  },
  {
    "q": "In JavaScript, what does the promise reaction records handler receive?",
    "a": "The promise reaction records handler receives the promise result, which is what we passed to resolve.",
    "img": "output/screenshots/frame_008.jpg"
  },
  {
    "q": "What happens to the handler in JavaScript when a string is completed ('done')?",
    "a": "The handler is added to the micro task queue.",
    "img": "output/screenshots/frame_009.jpg"
  },
  {
    "q": "Where does the asynchronous aspect of promises become significant in JavaScript?",
    "a": "The asynchronous aspect of promises comes into play when dealing with operations that do not complete immediately, such as fetching data from an API, file I/O, database operations etc. It allows the program to continue executing other code without waiting for these operations to finish, increasing efficiency.",
    "img": "output/screenshots/frame_009.jpg"
  },
  {
    "q": "What does the event loop check first when the call stack is empty in JavaScript?",
    "a": "The event loop first checks the micro task queue.",
    "img": "output/screenshots/frame_010.jpg"
  },
  {
    "q": "What does JavaScript do when the queue is empty?",
    "a": "When the queue is empty, JavaScript goes to the task queue.",
    "img": "output/screenshots/frame_010.jpg"
  },
  {
    "q": "What alternative names are often used for the term \"callback queue\" in JavaScript?",
    "a": "\"Callback queue\" is often also referred to as \"macro task queue\".",
    "img": "output/screenshots/frame_010.jpg"
  },
  {
    "q": "In JavaScript, which task queue gets priority?",
    "a": "The micro task queue gets priority in JavaScript.",
    "img": "output/screenshots/frame_010.jpg"
  },
  {
    "q": "In the context of JavaScript Promises, what has the speaker mentioned thus far about calling resolve and reject?",
    "a": "The speaker has mentioned that so far, they've only been calling resolve and reject synchronously.",
    "img": "output/screenshots/frame_011.jpg"
  },
  {
    "q": "What is typically initiated within the promise constructor in JavaScript?",
    "a": "Usually, some kind of asynchronous operation is initiated within the promise constructor.",
    "img": "output/screenshots/frame_011.jpg"
  },
  {
    "q": "What is meant by an asynchronous task in JavaScript's Promise constructor?",
    "a": "An asynchronous task refers to anything that is done off the main thread.",
    "img": "output/screenshots/frame_011.jpg"
  },
  {
    "q": "What are some real-world examples of where promises might be used in JavaScript?",
    "a": "Promises in JavaScript might be used when reading something from a file system, making a network request, or setting a timer.",
    "img": "output/screenshots/frame_011.jpg"
  },
  {
    "q": "What action can be performed using callback functions when data is returned in promises?",
    "a": "The callback function can be used to resolve the promise.",
    "img": "output/screenshots/frame_012.jpg"
  },
  {
    "q": "What are the two outcomes of a JavaScript promise?",
    "a": "The two outcomes are \"return\" if data is successfully returned, or \"reject\" if an error occurred.",
    "img": "output/screenshots/frame_012.jpg"
  },
  {
    "q": "What does the promise constructor in JavaScript do?",
    "a": "The promise constructor in JavaScript is used to create a new Promise. It receives the execution for the promise, defining what it will do.",
    "img": "output/screenshots/frame_013.jpg"
  },
  {
    "q": "What are two components of promises in JavaScript?",
    "a": "Timeout and then handler.",
    "img": "output/screenshots/frame_013.jpg"
  },
  {
    "q": "What happens when a new promise constructor is added to the call stack in JavaScript?",
    "a": "It creates the promise.",
    "img": "output/screenshots/frame_013.jpg"
  },
  {
    "q": "What is called on the first line of an executor function in JavaScript?",
    "a": "A set timeout.",
    "img": "output/screenshots/frame_014.jpg"
  },
  {
    "q": "What is the function of timeout in the call stack in JavaScript?",
    "a": "The timeout is responsible for scheduling the timer in JavaScript.",
    "img": "output/screenshots/frame_014.jpg"
  },
  {
    "q": "What function is typically passed to setTimeout in JavaScript when working with promises?",
    "a": "Typically, a callback function is passed to setTimeout when working with promises.",
    "img": "output/screenshots/frame_014.jpg"
  },
  {
    "q": "What is the function that the \"then\" handler follows in a JavaScript Promise?",
    "a": "The \"then\" handler follows a function that eventually calls \"resolve\".",
    "img": "output/screenshots/frame_014.jpg"
  },
  {
    "q": "What is responsible for creating a promise reaction record in JavaScript?",
    "a": "It is the function or operation that is added to the call stack.",
    "img": "output/screenshots/frame_015.jpg"
  },
  {
    "q": "What does creating a promise reaction record do in javascript?",
    "a": "It creates a record with a callback that we provided as its handler.",
    "img": "output/screenshots/frame_015.jpg"
  },
  {
    "q": "What happens after the \"then\" method in a JavaScript Promise is executed?",
    "a": "After the \"then\" method is executed, it is popped off the call stack.",
    "img": "output/screenshots/frame_015.jpg"
  },
  {
    "q": "What happens to the callback passed to set timeout in JavaScript?",
    "a": "The callback that we passed to set timeout is added to the task queue.",
    "img": "output/screenshots/frame_016.jpg"
  },
  {
    "q": "What happens in JavaScript when there is nothing left on the call stack?",
    "a": "When there's nothing left on the call stack, JavaScript is finished with its current script and it can move on to pulling tasks from the task queue.",
    "img": "output/screenshots/frame_016.jpg"
  },
  {
    "q": "What happens when you call resolve in a promise in JavaScript?",
    "a": "Calling resolve in a promise changes the promise state to fulfill. This typically happens within the call stack.",
    "img": "output/screenshots/frame_016.jpg"
  },
  {
    "q": "What does the 'resolve' function do in a JavaScript promise?",
    "a": "The 'resolve' function assigns the result to a value and schedules the associated handler to the microtask queue.",
    "img": "output/screenshots/frame_017.jpg"
  },
  {
    "q": "What does the event loop first check in JavaScript?",
    "a": "The event loop first checks the microtask queue.",
    "img": "output/screenshots/frame_017.jpg"
  },
  {
    "q": "What happens when a handler is added to the call stack in Javascript?",
    "a": "It console logs the promise results.",
    "img": "output/screenshots/frame_018.jpg"
  },
  {
    "q": "What is the behavior of promises in terms of the microtask queue in JavaScript?",
    "a": "When a promise is fulfilled or resolves, its then() or catch() methods are added to the microtask queue in JavaScript.",
    "img": "output/screenshots/frame_018.jpg"
  },
  {
    "q": "What can a script do while waiting for a promise to resolve or reject in JavaScript?",
    "a": "A script can keep running and performing important tasks.",
    "img": "output/screenshots/frame_018.jpg"
  },
  {
    "q": "What happens to a task in the microtask queue in JavaScript?",
    "a": "It gets added to the call stack.",
    "img": "output/screenshots/frame_019.jpg"
  },
  {
    "q": "What happens when a promise is created in JavaScript?",
    "a": "In JavaScript, the creation of a promise returns the promise itself and also creates a promise reaction record.",
    "img": "output/screenshots/frame_019.jpg"
  },
  {
    "q": "What is the topic addressed in the text portion related to JavaScript promises?",
    "a": "The topic addressed is promise results handling in JavaScript.",
    "img": "output/screenshots/frame_020.jpg"
  },
  {
    "q": "What is the first step in creating a Promise object in JavaScript?",
    "a": "The first step is using the 'new Promise' constructor.",
    "img": "output/screenshots/frame_021.jpg"
  },
  {
    "q": "What happens to the state of a promise in JavaScript when a result is received?",
    "a": "The state is set to \"fulfilled\" and the promise result corresponds to the received result. For example, if the result is \"one\", then the promise result will be set to \"one\".",
    "img": "output/screenshots/frame_021.jpg"
  },
  {
    "q": "What is created in JavaScript when a handler is used in the context of promises?",
    "a": "A promise reaction record is created with the handler.",
    "img": "output/screenshots/frame_021.jpg"
  },
  {
    "q": "What does the Promise return in JavaScript?",
    "a": "The Promise would return a result, which is then multiplied by two. The result is originally the number one from the promise.",
    "img": "output/screenshots/frame_022.jpg"
  },
  {
    "q": "What occurs when a promise object is created in JavaScript?",
    "a": "When a promise object is created in JavaScript, it is set to \"fulfilled\" once the function returns a result, in this case \"result times two\".",
    "img": "output/screenshots/frame_022.jpg"
  },
  {
    "q": "What does creating a promise reaction record with the exact same handler result in?",
    "a": "It results in doubling of the original result (result times two).",
    "img": "output/screenshots/frame_023.jpg"
  },
  {
    "q": "In JavaScript promise execution, what value does the promise result assume from the operation \"two times two\"?",
    "a": "The promise result assumes the value of four.",
    "img": "output/screenshots/frame_023.jpg"
  },
  {
    "q": "What is the state of a JavaScript Promise when a logged value has been fulfilled?",
    "a": "The state is set to \"fulfilled\".",
    "img": "output/screenshots/frame_023.jpg"
  },
  {
    "q": "What happens if we don't return a value in JavaScript and just log it instead?",
    "a": "The result is undefined because no value was returned, only logged.",
    "img": "output/screenshots/frame_024.jpg"
  },
  {
    "q": "What does handling a promise result incrementally in a non-blocking way mean in JavaScript?",
    "a": "This refers to the ability to handle promise results as they resolve, while not interrupting or waiting for other operations to complete. This is a powerful aspect of asynchronous programming in JavaScript.",
    "img": "output/screenshots/frame_024.jpg"
  },
  {
    "q": "What might be a practical application of a promise in JavaScript?",
    "a": "One application could be resizing an image. You might first want to use a promise to handle the result of this task.",
    "img": "output/screenshots/frame_025.jpg"
  },
  {
    "q": "What is a benefit of chaining 'then' in JavaScript's promises?",
    "a": "Chaining 'then' allows for non-blocking execution of asynchronous tasks, which improves the performance and efficiency of a JavaScript program.",
    "img": "output/screenshots/frame_026.jpg"
  },
  {
    "q": "What is a promise in JavaScript?",
    "a": "A promise in JavaScript is a JavaScript object that links the \"producing code\", that should execute in the future, and the \"consuming code\", which will handle the result once it's ready.\n\nQ: What is the advantage of using promises in JavaScript?",
    "img": "output/screenshots/frame_026.jpg"
  },
  {
    "q": "What happens when the new promise constructor is added to the call stack in JavaScript?",
    "a": "A new promise object is created.",
    "img": "output/screenshots/frame_027.jpg"
  },
  {
    "q": "What is the first thing that gets added to the call stack while working with promises in JavaScript?",
    "a": "The executor function.",
    "img": "output/screenshots/frame_028.jpg"
  },
  {
    "q": "What happens when we have a console log with the value of one in JavaScript?",
    "a": "It gets added through the call stack and then logs the value one.",
    "img": "output/screenshots/frame_028.jpg"
  },
  {
    "q": "What happens to the promise state and result when a promise is fulfilled in JavaScript?",
    "a": "The promise state is changed to 'fulfilled' and the promise result is set to the fulfilled value, in this case 'two'.",
    "img": "output/screenshots/frame_028.jpg"
  },
  {
    "q": "When does a promise for field reaction occur in JavaScript?",
    "a": "A promise for field reaction occurs on the next line after it is initiated with the 'resolve' function.",
    "img": "output/screenshots/frame_029.jpg"
  },
  {
    "q": "What happens to the executor function and the new promise constructor in JavaScript?",
    "a": "They are popped off the call stack.",
    "img": "output/screenshots/frame_029.jpg"
  },
  {
    "q": "What happens when we encounter the 'then' statement in JavaScript Promises?",
    "a": "It creates a promise reaction record.",
    "img": "output/screenshots/frame_029.jpg"
  },
  {
    "q": "What does the promise reaction record have in JavaScript?",
    "a": "The promise reaction record in JavaScript has access to the promise result and holds the handler.",
    "img": "output/screenshots/frame_030.jpg"
  },
  {
    "q": "Where do JavaScript promises go before they are executed?",
    "a": "They go into the micro task queue and are not immediately executed.",
    "img": "output/screenshots/frame_031.jpg"
  },
  {
    "q": "What does the call stack do when there is a call to console log in Javascript?",
    "a": "It executes the console log call in a normal way, even if the call stack isn't empty yet.",
    "img": "output/screenshots/frame_031.jpg"
  },
  {
    "q": "What happens when there is nothing on the call stack in JavaScript?",
    "a": "The first task and the micro task queue is added to it.",
    "img": "output/screenshots/frame_032.jpg"
  }
]